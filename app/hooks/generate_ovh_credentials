#!/usr/bin/env bash
set -Eeuo pipefail

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P )";
source "$ROOT/../load.sh";
unset -v ROOT;

if [[ -z ${1+x} ]]
then
  error "you have to specify a certificate configuration file for generating an ovh credentials file";
  exit 1;
fi

fqdn_config="${1}";

function generate_ovh_credentials(){
  local fqdn_config="${1}";
  
  local fqdn=$( domain fqdn $fqdn_config );
  info "Regenerating OVH credentials file" "$fqdn";

  local credentials_filename=$( domain ovh.output $fqdn_config );

  local outputs=$( outputs $fqdn_config );
  outputs=$( path $outputs );
  
  local output="$outputs/$fqdn";
  
  local credentials="$output/$credentials_filename";

  export OVH_ENDPOINT=$( domain ovh.endpoint $fqdn_config );
  export OVH_KEY=$( domain ovh.key $fqdn_config );
  export OVH_SECRET=$( domain ovh.secret $fqdn_config );
  export OVH_CONSUMER_KEY=$( domain ovh.consumer_key $fqdn_config );

  mkdir -p "$output";

  local templates=$( app templates );
  local template=$( domain ovh.template $fqdn_config );
  template=$( path "$templates/$template" );

  local template_engine=$( app template_engine );
  template_engine=$( path $template_engine );

  source <($template_engine $template) > "$credentials";

  unset -v OVH_ENDPOINT;
  unset -v OVH_KEY;
  unset -v OVH_SECRET;
  unset -v OVH_CONSUMER_KEY;

  if [[ $? != 0 ]]
  then
    error "During OVH credentials file generation";
    return 1;
  fi
  
  info "<% level 2 %>  OVH credentials file generated" "$fqdn";

  chmod 600 "$credentials";
  if [[ $? != 0 ]]
  then
    error "Making OVH credentials file readable only by the owner";
    return 1;
  fi

  info "<% level 2 %> OVH credentials file is now only readable by the owner" "$fqdn";
  return 0;
}

generate_ovh_credentials $fqdn_config;

unset -v fqdn_config;
unset -f generate_ovh_credentials;
